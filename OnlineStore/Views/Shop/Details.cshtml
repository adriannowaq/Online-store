@model ShopDetailsViewModel
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Bootstrap4.Core;
@using System.Security.Claims;

@section Styles{
    <link href="~/lib/jquery-bar-rating/dist/themes/fontawesome-stars.css" rel="stylesheet" />
    <link href="~/css/Shop/Details.css" rel="stylesheet" />
}
@{
    ViewData["Title"] = Model.Product.Product.Name;
    var reviewPage = (Context.Request.Path.ToString()).EndsWith("reviews");
}


<div class="container">
    <div class="borderbox">
        <div class="row m-0 p-0">
            <div class="col-md-6 col-sm-12">
                <div class="card">
                    <div class="card-body">
                        <img src="@Model.Product.Product.CloudStorageImageUrl" class="img-fluid" alt="@Model.Product.Product.CloudStorageImageName" />
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="card">
                    <div class="card-body">
                        <h4>@Model.Product.Product.Name</h4>

                        <div class="grade-count mb-2">
                            <div>
                                @if (Model.Product.AverageRate == null)
                                {
                                    <span>Brak opinii</span>
                                }
                                else
                                {
                                    @for (var j = 1; j <= Math.Round(Model.Product.AverageRate ?? 0); j++)
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                    @for (var j = Math.Round(Model.Product.AverageRate ?? 5); j < 5; j++)
                                    {
                                        <i class="far fa-star"></i>
                                    }
                                }
                            </div>
                        </div>
                        <p>Ilość w magazynie: @Model.Product.Product.Count</p>
                        <h3 class="mt-4">@Math.Round(Model.Product.Product.Price, 2) zł</h3>
                        @{
                            if (Model.Product.Product.Available)
                            {
                                <input type="number" name="num" value="1" min="1" max="@Model.Product.Product.Count" class="form-control one-width" />
                                <button class="mt-2 btn btn-secondary one-width" id="btn-addtocart">
                                    <span id="btn-cart">
                                        <i class="fas fa-lg fa-shopping-cart mr-2"></i>
                                        Dodaj do koszyka
                                    </span>
                                </button>
                            }
                            else
                            {
                                <input type="number" name="num" value="0" min="0" max="0" class="form-control one-width" disabled />
                                <button class="mt-2 btn btn-secondary one-width" id="btn-addtocart" disabled>
                                    <span id="btn-cart">
                                        <i class="fas fa-lg fa-shopping-cart mr-2"></i>
                                        Dodaj do koszyka
                                    </span>
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>


        </div>
        <div class="row m-0 p-0" id="details-nav">
            <div class="col-6 text-center  border border-right m-0 @(reviewPage ? "" : "tile-active")" id="description">
                Opis produktu
            </div>
            <div class="col-6 text-center  border border-left  m-0 @(reviewPage ? "tile-active" : "")" id="reviews-panel">
                Opinie użytkowników (@Model.Reviews.TotalItemCount)
            </div>
        </div>

        <div id="description-accordion" class="@(reviewPage ? "d-none" : "")">
            <div class="col-12">
                <div class="text-body text-justify p-5">
                    @Html.Raw(Model.Product.Product.Description)
                </div>
            </div>
        </div>
        
        <div id="reviews-accordion" class="@(reviewPage ? "" : "d-none")">
            <div class="col-12  p-5 text-center">
                @{
                    if (User.Identity.IsAuthenticated)
                    {

                        @await Html.PartialAsync("Shop/AddReview",
                            new AddReviewModel(),
                            new ViewDataDictionary(ViewData) { { "ProductId", Model.Product.Product.Id } });

                    }
                    else
                    {
                        <div class="add-review mb-5 ">
                            <h4 class="text-center">Aby dodać opinię musisz być zalogowany!</h4>
                            <button class="mt-2 btn btn-secondary one-width" type="button" onclick="location.href = '@Url.Action("Login", "Account")'">
                                <span id="btn-cart">
                                    Zaloguj się!
                                </span>
                            </button>
                        </div>
                    }
                }
                <div class="text-body text-justify">
                    <h4 class="text-center">Opinie klientów</h4>
                    @{
                        if (Model.Reviews.Count == 0)
                        {
                            <div class="my-2 border-bottom">
                                <blockquote class="blockquote">
                                    <p class="mb-0">
                                        Brak opini na temat danego przedmiotu!
                                    </p>
                                </blockquote>
                            </div>
                        }
                        else
                        {
                            foreach (var review in Model.Reviews)
                            {

                                @for (int j = 1; j <= review.Rate; j++)
                                {
                                    <i class="fas fa-star"></i>
                                }
                                @for (int j = review.Rate; j < 5; j++)
                                {
                                    <i class="far fa-star"></i>
                                }
                                <div class="my-2 border-bottom">
                                    <blockquote class="blockquote">
                                        <p class="mb-0">
                                            @review.Comment
                                        </p>
                                        <footer class="blockquote-footer">@review.User.Name</footer>
                                    </blockquote>
                                </div>
                            }
                        }
                    }

                </div>
                @if (Model.Reviews.Count > 0)
                {
                    @Html.PagedListPager(Model.Reviews, page => Url.Action(nameof(ShopController.Details), new { id = Model.Product.Product.Id, pageNumber = page }), Bootstrap4PagedListRenderOptions.ClassicPlusFirstAndLast);
                }
            </div>

        </div>
    </div>

</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/Shop/details.js"></script>
    <script src="~/lib/jquery-bar-rating/jquery.barrating.js"></script>
}